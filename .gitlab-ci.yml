stages:
  - test
  - security
  - lint
  - sonarqube

code_quality:
  stage: test
  image: registry.gitlab.com/gitlab-org/ci-cd/codequality:latest
  script:
    - /codequality
  allow_failure: false
  artifacts:
    reports:
      codequality: gl-code-quality-report.json

sast:
  stage: security
  image: registry.gitlab.com/gitlab-org/security-products/sast:latest
  variables:
    SAST_EXPERIMENTAL_FEATURES: "true"
  script:
    - /analyze
  artifacts:
    reports:
      sast: gl-sast-report.json
  allow_failure: false

dependency_scanning:
  stage: security
  image: registry.gitlab.com/gitlab-org/security-products/dependency-scanning:latest
  script:
    - /analyze || touch dep-scan-issues.txt
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
  allow_failure: true
  after_script:
    - |
      if [ -s dep-scan-issues.txt ]; then
        curl --request POST --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --header "Content-Type: application/json" \
          --data @- <<EOF
          {
            "title": "Dependency Scanning Issues Detected",
            "description": "Dependency scanning found vulnerabilities. Check the pipeline report for details."
          }
          EOF
          "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/issues"
      fi

eslint:
  stage: lint
  image: node:latest
  script:
    - npm install --no-save eslint
    - npx eslint . --ext .js,.ts || touch eslint-issues.txt
  allow_failure: true
  after_script:
    - |
      if [ -s eslint-issues.txt ]; then
        curl --request POST --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --header "Content-Type: application/json" \
          --data @- <<EOF
          {
            "title": "ESLint Issues Found",
            "description": "Linting errors detected. Please check and fix them."
          }
          EOF
          "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/issues"
      fi

prettier:
  stage: lint
  image: node:latest
  script:
    - npm install --no-save prettier
    - npx prettier --check . || touch prettier-issues.txt
  allow_failure: true
  after_script:
    - |
      if [ -s prettier-issues.txt ]; then
        curl --request POST --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --header "Content-Type: application/json" \
          --data @- <<EOF
          {
            "title": "Prettier Formatting Issues Found",
            "description": "Code formatting issues detected. Run Prettier to fix them."
          }
          EOF
          "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/issues"
      fi

sonarqube:
  stage: sonarqube
  image: sonarsource/sonar-scanner-cli
  before_script:
    - "/bin/bash"
    - curl -Lo jq https://github.com/stedolan/jq/releases/latest/download/jq-linux64
    - chmod +x jq
    - export PATH=$PWD:$PATH

  script:
    - sonar-scanner -Dsonar.token="$SONAR_TOKEN"

    - |
      RESPONSE=$(curl -s "https://sonarcloud.io/api/issues/search?componentKeys=OveRide-Phoenix_kk_v1")
      echo "SonarQube Response: $RESPONSE"
      SONAR_ISSUES=$(echo "$RESPONSE" | jq '.total')
      echo "Total SonarQube Issues: $SONAR_ISSUES"

      if [ "$SONAR_ISSUES" -gt 0 ]; then
        MR_RESPONSE=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests")

        echo "Merge Request Response: $MR_RESPONSE"

        if echo "$MR_RESPONSE" | jq -e 'if type == "array" then .[0].author.username else .author.username end' > /dev/null 2>&1; then
          MR_AUTHOR=$(echo "$MR_RESPONSE" | jq -r 'if type == "array" then .[0].author.username else .author.username end')
        else
          MR_AUTHOR="unknown"
        fi

        echo "MR Author: $MR_AUTHOR"

        echo "$RESPONSE" | jq -c '.issues[]' | while read issue; do
          ISSUE_TITLE=$(echo "$issue" | jq -r '.message')
          ISSUE_COMPONENT=$(echo "$issue" | jq -r '.component')
          ISSUE_LINE=$(echo "$issue" | jq -r '.line // "unknown"')
          ISSUE_SEVERITY=$(echo "$issue" | jq -r '.severity')
          ISSUE_TYPE=$(echo "$issue" | jq -r '.type')
          ISSUE_RULE=$(echo "$issue" | jq -r '.rule')

          curl --request POST --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
            --header "Content-Type: application/json" \
            --data @- <<EOF
            {
              "title": "SonarQube Issue: $ISSUE_TITLE",
              "description": "**Component**: $ISSUE_COMPONENT\n**Line**: $ISSUE_LINE\n**Severity**: $ISSUE_SEVERITY\n**Type**: $ISSUE_TYPE\n**Rule**: $ISSUE_RULE\n\n$ISSUE_TITLE",
              "assignee_ids": ["$MR_AUTHOR"]
            }
            EOF
            "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/issues"

        done
      fi
  allow_failure: true
