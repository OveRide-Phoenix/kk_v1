Update .gitlab-ci.yml filestages:
  - test
  - sonarqube

code_quality:
  stage: test
  image: registry.gitlab.com/gitlab-org/ci-cd/codequality:latest
  script:
    - /codequality
  allow_failure: false
  artifacts:
    reports:
      codequality: gl-code-quality-report.json

sonarqube:
  stage: sonarqube
  image: sonarsource/sonar-scanner-cli
  before_script:
    - "/bin/bash"
    - curl -Lo jq https://github.com/stedolan/jq/releases/latest/download/jq-linux64
    - chmod +x jq
    - export PATH=$PWD:$PATH
  script:
    - |
      if [ -z "$SONAR_TOKEN" ]; then
        echo "Error: SONAR_TOKEN is not set"
        exit 1
      fi
      sonar-scanner -Dsonar.token="ed9e846a1947052b39fde8b0d9a535ee976de71e"

    - |
      RESPONSE=$(curl -s "https://sonarcloud.io/api/issues/search?componentKeys=OveRide-Phoenix_kk_v1")
      echo "SonarQube Response: $RESPONSE"
      SONAR_ISSUES=$(echo "$RESPONSE" | jq '.total')
      echo "Total SonarQube Issues: $SONAR_ISSUES"

      if [ "$SONAR_ISSUES" -gt 0 ]; then
        if [ -z "$GITLAB_TOKEN" ]; then
          echo "Error: GITLAB_TOKEN is not set"
          exit 1
        fi

        MR_RESPONSE=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests")

        echo "Merge Request Response: $MR_RESPONSE"

        if echo "$MR_RESPONSE" | jq -e 'if type == "array" then .[0].author.username else .author.username end' > /dev/null 2>&1; then
          MR_AUTHOR=$(echo "$MR_RESPONSE" | jq -r 'if type == "array" then .[0].author.username else .author.username end')
        else
          MR_AUTHOR="unknown"
        fi

        echo "MR Author: $MR_AUTHOR"

        echo "$RESPONSE" | jq -c '.issues[]' | while read issue; do
          ISSUE_TITLE=$(echo "$issue" | jq -r '.message')
          ISSUE_COMPONENT=$(echo "$issue" | jq -r '.component')
          ISSUE_SEVERITY=$(echo "$issue" | jq -r '.severity')
          ISSUE_TYPE=$(echo "$issue" | jq -r '.type')
          ISSUE_LINE=$(echo "$issue" | jq -r '.line // "unknown"')
          ISSUE_RULE=$(echo "$issue" | jq -r '.rule')

          # Check if issue already exists in GitLab
          EXISTING_ISSUE=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
            "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/issues" | jq -r \
            --arg TITLE "$ISSUE_TITLE" '.[] | select(.title == $TITLE)')

          if [ -z "$EXISTING_ISSUE" ]; then
            echo "Creating new GitLab issue for: $ISSUE_TITLE"

            curl --request POST --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
              --header "Content-Type: application/json" \
              --data "{
                \"title\": \"SonarQube Issue: $ISSUE_TITLE\",
                \"description\": \"### SonarQube Issue Found\n
                **ðŸ”¹ Severity:** $ISSUE_SEVERITY  \n
                **ðŸ”¹ Type:** $ISSUE_TYPE  \n
                **ðŸ”¹ Rule:** $ISSUE_RULE  \n
                **ðŸ”¹ Component:** $ISSUE_COMPONENT  \n
                **ðŸ”¹ Line:** $ISSUE_LINE  \n
                _This issue was detected automatically by SonarQube._\",
                \"assignee_ids\": [\"$MR_AUTHOR\"]
              }" \
              "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/issues"
          else
            echo "Issue already exists in GitLab: $ISSUE_TITLE"
          fi
        done
      fi
  allow_failure: true
